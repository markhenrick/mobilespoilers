/*
 * This file is generated by jOOQ.
 */
package site.markhenrick.mobilespoilers.dal.jooqgenerated.tables;


import site.markhenrick.mobilespoilers.dal.jooqgenerated.DefaultSchema;
import site.markhenrick.mobilespoilers.dal.jooqgenerated.Indexes;
import site.markhenrick.mobilespoilers.dal.jooqgenerated.Keys;
import site.markhenrick.mobilespoilers.dal.jooqgenerated.tables.records.Spoiler;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spoilers extends TableImpl<Spoiler> {

    private static final long serialVersionUID = -1800615361;

    /**
     * The reference instance of <code>spoilers</code>
     */
    public static final Spoilers SPOILERS = new Spoilers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Spoiler> getRecordType() {
        return Spoiler.class;
    }

    /**
     * The column <code>spoilers.message_id</code>.
     */
    public final TableField<Spoiler, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>spoilers.channel_id</code>.
     */
    public final TableField<Spoiler, String> CHANNEL_ID = createField(DSL.name("channel_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>spoilers.user_id</code>.
     */
    public final TableField<Spoiler, String> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>spoilers</code> table reference
     */
    public Spoilers() {
        this(DSL.name("spoilers"), null);
    }

    /**
     * Create an aliased <code>spoilers</code> table reference
     */
    public Spoilers(String alias) {
        this(DSL.name(alias), SPOILERS);
    }

    /**
     * Create an aliased <code>spoilers</code> table reference
     */
    public Spoilers(Name alias) {
        this(alias, SPOILERS);
    }

    private Spoilers(Name alias, Table<Spoiler> aliased) {
        this(alias, aliased, null);
    }

    private Spoilers(Name alias, Table<Spoiler> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Spoilers(Table<O> child, ForeignKey<O, Spoiler> key) {
        super(child, key, SPOILERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_SPOILERS_1);
    }

    @Override
    public UniqueKey<Spoiler> getPrimaryKey() {
        return Keys.PK_SPOILERS;
    }

    @Override
    public List<UniqueKey<Spoiler>> getKeys() {
        return Arrays.<UniqueKey<Spoiler>>asList(Keys.PK_SPOILERS);
    }

    @Override
    public Spoilers as(String alias) {
        return new Spoilers(DSL.name(alias), this);
    }

    @Override
    public Spoilers as(Name alias) {
        return new Spoilers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spoilers rename(String name) {
        return new Spoilers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spoilers rename(Name name) {
        return new Spoilers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
